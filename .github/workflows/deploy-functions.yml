name: Deploy Supabase Function

# Set up the workflow to trigger on pushes to the main branch
# and changes in the `functions` directory.
on:
  push:
    branches:
      - main
    paths:
      - mapme-microservices/supabase/functions/**
  # Allow manual triggering of the workflow through the Actions tab.
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize, reopened, closed]

jobs:
  Deploy-Edge-Functions:
    # Use the latest version of the Ubuntu environment to run the job.
    runs-on: ubuntu-latest

    # Set up environment variables for the Supabase CLI and project ID.
    env:
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      PROJECT_ID: qsnuignbeuiqzmiksjty

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install Supabase CLI
        uses: supabase/setup-cli/@latest
        with:
          version: latest

      - name: Initialize Supabase CLI
        run: supabase init

      # Get a list of all the files that have changed since the last push.
      # Limit the search to files in the `functions` directory.
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v35
        with:
          files: mapme-microservices/supabase/functions/**
          debug: true

      # Store the list of changed files in an environment variable.
      - name: Store changed files
        run: echo -n "CHANGED_FILES=${{steps.changed-files.outputs.all_changed_files}}" >> $GITHUB_ENV

      # Get a list of all the edge functions that may be impacted by the changes.
      # This includes functions in the functions directory that have changed and
      # any files in the _shared directory that are imported by the edge functions
      # in the functions directory.
      - name: Get impacted functions
        id: impacted_functions
        run: |
          impactedFunctions=()
          checkedFiles=()
          filesToCheck=($CHANGED_FILES)
          while [ ${#filesToCheck[@]} -gt 0 ]; do
            # Get the next file to check.
            file=${filesToCheck[0]}
            unset filesToCheck[0]
            filesToCheck=(${filesToCheck[*]})

            # Skip files that have already been checked.
            if [[ "${checkedFiles[*]}" == *"$file"* ]]; then
              continue
            fi

            # Mark the current file as checked.
            checkedFiles+=("$file")

            # Get the folder and file names for the current file.
            folder=$(dirname "$file")
            folder_name=$(basename "$folder")
            file_name=$(basename "$file")

            # If the current file is in the `_shared` directory,
            # check for any files that import from it.
            if [ "$folder_name" == "_shared" ]; then
              # Search for files that import from the current file.
              if output=$(grep -r -l "import .* from .*/${file_name}" . --only-matching 2>/dev/null); then
                # Add any matching files to the list of files to check.
                while read -r line; do
                  filesToCheck+=("$line")
                  matched_files+=("$line")
                done <<< "$output"
              fi
            # If the current file is not in the _shared directory, we assume that it's a function file that
            # needs to be deployed. We add the parent folder (i.e. the function name) to the impactedFunctions array.
            else
              impactedFunctions+=("$folder_name")
            fi
          done

          # Convert the array to a string and store it in the environment variable
          impactedFunctions=$(echo "${impactedFunctions[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' ')
          echo -n "IMPACTED_FUNCTIONS=$impactedFunctions" >> $GITHUB_ENV

      - name: Deploy Functions
        run: |
          for function in $IMPACTED_FUNCTIONS; do
            supabase functions deploy $function --project-ref $PROJECT_ID
          done
